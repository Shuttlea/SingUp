/*
 * Sing Up / Sing In
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 0.0.1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package main

import (
	"log"
	"log/slog"
	"net/http"

	"singup/config"
	"singup/db"
	sw "singup/go"
)

func main() {
	// load config
	cfg, err := config.InitConfig()
	if err != nil {
		slog.Error("Config does't load", "error", err)
		panic(err)
	}
	slog.Info("Config loaded", "Parameters", *cfg)

	// set logger level
	slog.SetLogLoggerLevel(logLevel(cfg.LogLevel))

	// database connect
	sw.DB, err = db.ConnectDB(cfg)
	if err != nil {
		slog.Error("Can't open database", "error", err)
		panic(err)
	}
	defer db.CloseDBConnection(sw.DB)

	// init mail config
	sw.InitMailConf(cfg.MailBox, cfg.MailUser, cfg.MailPass, cfg.HostAddr)

	slog.Info("Server started on", "port", cfg.HostAddr)
	router := sw.NewRouter()
	router.PathPrefix("/static/").Handler(http.StripPrefix("/static/", http.FileServer(http.Dir("./ui/static/"))))
	log.Fatal(http.ListenAndServe(cfg.HostAddr, router))
}

func logLevel(s string) slog.Level {
	if s == "INFO" {
		return slog.LevelInfo
	}
	return slog.LevelDebug
}
